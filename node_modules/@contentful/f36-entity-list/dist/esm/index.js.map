{"version":3,"sources":["../../src/EntityList.tsx","../../src/EntityList.styles.ts","../../src/EntityListItem/EntityListItem.tsx","../../src/EntityListItem/EntityListItem.styles.ts","../../src/CompoundEntityList.tsx"],"names":["React","cx","css","tokens","getEntityListStyles","_EntityList","props","ref","styles","EntityList","EntityStatusBadge","Flex","Box","AssetIcon","EntryIcon","ReleaseIcon","MoreHorizontalIcon","PageIcon","Icon","Text","DragHandle","Button","Menu","Skeleton","getEntityListItemStyles","__spreadProps","__spreadValues","ICON_MAP","EntityListItem","_a","_b","className","testId","title","description","contentType","entityType","withThumbnail","thumbnailUrl","thumbnailAltText","status","actions","withDragHandle","isDragActive","isLoading","onClick","href","cardDragHandleProps","cardDragHandleComponent","isActionsDisabled","otherProps","__objRest","renderCardDragHandle","Element","asIcon"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\n\nimport { getEntityListStyles } from './EntityList.styles';\n\nexport interface EntityListProps extends CommonProps {\n  children?: React.ReactNode;\n}\n\nfunction _EntityList(\n  props: ExpandProps<EntityListProps>,\n  ref: React.Ref<HTMLUListElement>,\n) {\n  const styles = getEntityListStyles();\n\n  return (\n    <ul\n      data-test-id={props.testId || 'cf-ui-entity-list'}\n      ref={ref}\n      className={cx(styles.root, props.className)}\n      style={props.style}\n    >\n      {props.children}\n    </ul>\n  );\n}\n\n_EntityList.displayName = 'EntityList';\n\nexport const EntityList = React.forwardRef(_EntityList);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getEntityListStyles = () => ({\n  root: css({\n    display: 'block',\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    border: `1px solid ${tokens.gray200}`,\n    borderBottom: 'none',\n    borderRadius: tokens.borderRadiusMedium,\n    overflow: 'hidden',\n  }),\n});\n","import React, { type MouseEventHandler } from 'react';\nimport { cx } from 'emotion';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport {\n  Flex,\n  Box,\n  type CommonProps,\n  type EntityStatus,\n  type PickUnion,\n} from '@contentful/f36-core';\nimport {\n  AssetIcon,\n  EntryIcon,\n  ReleaseIcon,\n  MoreHorizontalIcon,\n  PageIcon,\n} from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\nimport { Text } from '@contentful/f36-typography';\nimport { DragHandle, type DragHandleProps } from '@contentful/f36-drag-handle';\nimport { Button } from '@contentful/f36-button';\nimport { Menu } from '@contentful/f36-menu';\nimport { Skeleton } from '@contentful/f36-skeleton';\n\nimport { getEntityListItemStyles } from './EntityListItem.styles';\n\ntype EntityListItemStatus = PickUnion<\n  EntityStatus,\n  'archived' | 'changed' | 'draft' | 'published'\n>;\n\nconst ICON_MAP = {\n  asset: AssetIcon,\n  entry: EntryIcon,\n  release: ReleaseIcon,\n  page: PageIcon,\n};\n\nexport interface EntityListItemProps extends CommonProps {\n  /**\n   * The title of the entity\n   */\n  title: string;\n  /**\n   * The description of the entity\n   */\n  description?: string;\n  /**\n   * The content type of the entity\n   */\n  contentType?: string;\n  /**\n   * The publish status of the entry\n   */\n  status?: EntityListItemStatus;\n  /**\n   * A boolean used to render the Thumbnail or not\n   */\n  withThumbnail?: boolean;\n  /**\n   * The URL of the entity's preview thumbnail. Use 46px x 46px images for best results\n   */\n  thumbnailUrl?: string;\n  /**\n   * The alt text for the thumbnail\n   */\n  thumbnailAltText?: string;\n  /**\n   * Menu elements rendered as actions in Menu\n   */\n  actions?: React.ReactNodeArray;\n  /**\n   * Renders a drag handle for the component for use in drag and drop contexts\n   */\n  withDragHandle?: boolean;\n  /**\n   * Applies styling for when the component is actively being dragged by the user\n   */\n  isDragActive?: boolean;\n  /**\n   * Prop to pass a custom CardDragHandle component to for use in drag and drop contexts\n   */\n  cardDragHandleComponent?: React.ReactNode;\n  /**\n   * Props to pass down to the default CardDragHandle component (does not work with cardDragHandleComponent prop)\n   */\n  cardDragHandleProps?: Partial<DragHandleProps>;\n  /**\n   * An entity can either be an Entry, an Asset or a Release. This prop will apply styling based on if the entity is an asset, a release or an entry\n   *\n   * Note: 'entry' and 'asset' are @deprecated but supported in v1.x for backwards compatibility\n   */\n  entityType?: 'Entry' | 'Asset' | 'entry' | 'asset' | 'Release' | 'Page';\n  /**\n   * Loading state for the component - when true will display loading feedback to the user\n   */\n  isLoading?: boolean;\n  /**\n   * The action to be performed on click of the EntryCard\n   */\n  onClick?: MouseEventHandler;\n  /**\n   * The href for the component. Will render the card as an `a` element for native browser link handling\n   */\n  href?: string;\n  /**\n   * A boolean used to disable the CardActions\n   */\n  isActionsDisabled?: boolean;\n}\n\nexport const EntityListItem = ({\n  className,\n  testId = 'cf-ui-entity-list-item',\n  title,\n  description,\n  contentType,\n  entityType = 'entry',\n  withThumbnail = true,\n  thumbnailUrl,\n  thumbnailAltText,\n  status,\n  actions,\n  withDragHandle,\n  isDragActive,\n  isLoading,\n  onClick,\n  href,\n  cardDragHandleProps,\n  cardDragHandleComponent,\n  isActionsDisabled = false,\n  ...otherProps\n}: EntityListItemProps): React.ReactElement => {\n  const styles = getEntityListItemStyles();\n\n  const renderCardDragHandle = () => {\n    if (cardDragHandleComponent) {\n      return cardDragHandleComponent;\n    } else if (withDragHandle) {\n      return (\n        <DragHandle\n          className={styles.dragHandle}\n          isActive={isDragActive}\n          label=\"Reorder entry\"\n          {...cardDragHandleProps}\n        />\n      );\n    }\n  };\n\n  let Element: React.ElementType = 'article';\n  if (href || onClick) {\n    Element = href ? 'a' : 'button';\n  }\n\n  // archived assets will not be available on the CDN, resulting in a broken image src\n  const isArchived = status === 'archived';\n  const asIcon = isArchived || !thumbnailUrl;\n\n  return (\n    <li\n      {...otherProps}\n      className={cx(styles.root({ isDragActive }), className)}\n      data-test-id={testId}\n    >\n      {renderCardDragHandle()}\n      {isLoading ? (\n        <article className={styles.card}>\n          <Skeleton.Container clipId=\"f36-entity-list-item-skeleton\">\n            <Skeleton.Image height={46} width={46} />\n            <Skeleton.BodyText\n              numberOfLines={2}\n              lineHeight={18}\n              offsetLeft={54}\n            />\n          </Skeleton.Container>\n        </article>\n      ) : (\n        <Element\n          className={styles.card}\n          onClick={onClick}\n          href={href}\n          type={Element === 'button' ? 'button' : undefined}\n          target={href ? '_blank' : undefined}\n        >\n          {withThumbnail && (\n            <figure className={styles.media}>\n              {asIcon ? (\n                <Icon as={ICON_MAP[entityType.toLowerCase()]} variant=\"muted\" />\n              ) : (\n                <img\n                  src={thumbnailUrl}\n                  className={styles.thumbnail}\n                  alt={thumbnailAltText}\n                />\n              )}\n            </figure>\n          )}\n\n          <div className={styles.content}>\n            <Flex>\n              <Text\n                as=\"h3\"\n                lineHeight=\"lineHeightM\"\n                fontColor=\"gray900\"\n                fontWeight=\"fontWeightDemiBold\"\n                isTruncated\n              >\n                {title}\n              </Text>\n\n              {contentType && (\n                <Text\n                  as=\"span\"\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray600\"\n                  className={styles.contentType}\n                  isTruncated\n                >\n                  ({contentType})\n                </Text>\n              )}\n            </Flex>\n            <Flex marginTop=\"spacing2Xs\">\n              {entityType && (\n                <Text\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray600\"\n                  className={styles.entityType}\n                >\n                  {entityType}\n                </Text>\n              )}\n              {description && (\n                <Text\n                  as=\"p\"\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray900\"\n                  isTruncated\n                  className={styles.description}\n                >\n                  {description}\n                </Text>\n              )}\n            </Flex>\n          </div>\n\n          <Flex\n            className={styles.meta}\n            alignItems=\"flex-start\"\n            paddingLeft=\"spacingXs\"\n          >\n            {status && (\n              <Box marginRight={actions ? 'spacingXs' : 'none'}>\n                <EntityStatusBadge entityStatus={status} />\n              </Box>\n            )}\n\n            {actions && (\n              <Menu>\n                <Menu.Trigger>\n                  <Button\n                    isDisabled={isActionsDisabled}\n                    startIcon={<MoreHorizontalIcon />}\n                    variant=\"transparent\"\n                    aria-label=\"Actions\"\n                    size=\"small\"\n                    className={styles.menuTrigger}\n                  />\n                </Menu.Trigger>\n                <Menu.List>{actions}</Menu.List>\n              </Menu>\n            )}\n          </Flex>\n        </Element>\n      )}\n    </li>\n  );\n};\n\nEntityListItem.displayName = 'EntityListItem';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { EntityListItemProps } from './EntityListItem';\n\nexport const getEntityListItemStyles = () => ({\n  root: (props: Pick<EntityListItemProps, 'isDragActive'>) =>\n    css({\n      display: 'flex',\n      boxShadow: `inset 0 -1px 0 ${tokens.gray200}`,\n      position: 'relative',\n      transition: `${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n      transitionProperty: 'box-shadow, background-color',\n      backgroundColor: tokens.colorWhite,\n      ...(props.isDragActive\n        ? {\n            boxShadow: tokens.boxShadowHeavy,\n          }\n        : {}),\n\n      '&:hover': {\n        backgroundColor: tokens.gray100,\n      },\n    }),\n  card: css({\n    display: 'flex',\n    textDecoration: 'none',\n    width: '100%',\n    minHeight: tokens.spacing3Xl,\n    padding: tokens.spacingXs,\n    margin: 0, // remove the default button margin in Safari.\n    border: 'none',\n    background: 'none',\n    textAlign: 'left',\n  }),\n  content: css({\n    flexGrow: 1,\n    minWidth: 0,\n    position: 'relative',\n  }),\n  media: css({\n    display: 'flex',\n    flexShrink: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: tokens.gray200,\n    width: tokens.spacing2Xl,\n    height: tokens.spacing2Xl,\n    margin: '0',\n    marginRight: tokens.spacingXs,\n  }),\n  thumbnail: css({\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  }),\n  contentType: css({\n    marginLeft: tokens.spacingXs,\n  }),\n  entityType: css({\n    textTransform: 'capitalize',\n  }),\n  description: css({\n    '&::before': {\n      content: '\"|\"',\n      color: tokens.gray400,\n      height: '25%',\n      marginTop: tokens.spacing2Xs,\n      marginLeft: tokens.spacing2Xs,\n      marginRight: tokens.spacing2Xs,\n    },\n  }),\n  meta: css({\n    marginLeft: 'auto',\n    flexShrink: 0,\n  }),\n  dragHandle: css({\n    borderBottomLeftRadius: '0',\n    borderTopLeftRadius: '0',\n    boxShadow: `inset 0 -1px 0 ${tokens.gray200}`,\n  }),\n  menuTrigger: css({\n    padding: '0 0.125rem',\n    minHeight: '1.5rem',\n  }),\n});\n","import { EntityList as OriginalEntityList } from './EntityList';\nimport { EntityListItem } from './EntityListItem/EntityListItem';\n\ntype CompoundEntityList = typeof OriginalEntityList & {\n  Item: typeof EntityListItem;\n};\n\nexport const EntityList = OriginalEntityList as CompoundEntityList;\nEntityList.Item = EntityListItem;\n"]}