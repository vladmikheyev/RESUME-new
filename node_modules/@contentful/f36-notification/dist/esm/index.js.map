{"version":3,"sources":["../../src/Notification.tsx","../../src/NotificationsManager/NotificationsManager.tsx","../../src/NotificationsManager/useAsyncState.ts","../../src/NotificationItem/NotificationItem.tsx","../../src/NotificationItem/NotificationItem.styles.ts","../../src/NotificationItem/NotificationItemContainer.tsx","../../src/NotificationsManager/NotificationsManager.styles.ts"],"names":["React","render","useCallback","useState","cx","useRef","useAsyncState","value","ref","forceUpdate","newState","state","CheckCircleIcon","ErrorCircleIcon","WarningIcon","CloseIcon","InfoCircleIcon","Button","TextLink","Flex","Box","Heading","Paragraph","css","tokens","variantColors","getWrapperStyle","variant","getIconStyle","notificationStyle","titleStyle","contentStyle","closeButtonStyle","getStyles","_NotificationItem","props","_b","_a","className","children","cta","withCloseButton","onClose","testId","title","otherProps","__objRest","styles","iconSize","iconVariants","__spreadProps","__spreadValues","NotificationItem","Component","AnimateHeight","defaultProps","NotificationItemContainer","prevProps","isShown","duration","placement","placementOffset","uniqueId","getUniqueId","NotificationsManager","register","items","setItems","setPlacementState","setPlacementOffset","setDuration","setPlacement","params","close","id","item","closeAndDelete","closeAll","show","text","settings","itemDuration","withClose","notificationId","notification","alreadyThere","initiated","internalAPI","registerAPI","fnName","fn","createRoot","callback","container","afterInit","args","resolve","Notification"],"mappings":"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","sourcesContent":["/* global Promise */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport {\n  NotificationsManager,\n  ShowAction,\n  CloseAction,\n  CloseAllAction,\n  SetPlacementAction,\n  SetDurationAction,\n  NotificationProps,\n  Placement,\n} from './NotificationsManager';\nimport type { NotificationVariant, NotificationCta } from './types';\n\nexport interface NotificationsAPI {\n  success: ShowAction<Notification>;\n  error: ShowAction<Notification>;\n  show: ShowAction<Notification>;\n  close: CloseAction<void>;\n  closeAll: CloseAllAction<void>;\n  setPlacement: SetPlacementAction<void>;\n  setDuration: SetDurationAction<void>;\n}\n\nlet initiated = false;\nconst internalAPI: Partial<NotificationsAPI> = {};\n\nfunction registerAPI(fnName: string, fn: Function) {\n  internalAPI[fnName] = fn;\n}\n\nfunction createRoot(callback: () => void) {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  render(<NotificationsManager register={registerAPI} />, container, callback);\n}\n\nfunction afterInit<PromiseValueType>(fn: Function) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (...args: any[]) => {\n    if (!initiated) {\n      initiated = true;\n      return new Promise<PromiseValueType>((resolve) => {\n        createRoot(() => {\n          resolve(fn(...args));\n        });\n      });\n    } else {\n      return Promise.resolve<PromiseValueType>(fn(...args));\n    }\n  };\n}\n\nconst show =\n  (variant: NotificationVariant) =>\n  (\n    text: string,\n    settings?: {\n      duration?: number;\n      withClose?: boolean;\n      id?: string;\n      title?: string;\n      cta?: Partial<NotificationCta>;\n    },\n  ) => {\n    if (internalAPI.show) {\n      return internalAPI.show(text, {\n        ...(settings || {}),\n        variant,\n      });\n    }\n  };\n\ntype ExternalShowAction<T> = (\n  text: string,\n  settings?: {\n    duration?: number;\n    withClose?: boolean;\n    id?: string;\n    title?: string;\n    cta?: Partial<NotificationCta>;\n  },\n) => T;\n\nexport const Notification: {\n  success: ExternalShowAction<Promise<NotificationProps>>;\n  error: ExternalShowAction<Promise<NotificationProps>>;\n  warning: ExternalShowAction<Promise<NotificationProps>>;\n  info: ExternalShowAction<Promise<NotificationProps>>;\n  close: CloseAction<Promise<void>>;\n  closeAll: CloseAllAction<Promise<void>>;\n  setPlacement: SetPlacementAction<Promise<void>>;\n  setDuration: SetDurationAction<Promise<void>>;\n} = {\n  success: afterInit<NotificationProps>(show('positive')),\n  error: afterInit<NotificationProps>(show('negative')),\n  warning: afterInit<NotificationProps>(show('warning')),\n  info: afterInit<NotificationProps>(show('primary')),\n  close: afterInit<void>((id: string | number) => {\n    if (internalAPI.close) {\n      return internalAPI.close(id);\n    }\n  }),\n  closeAll: afterInit<void>(() => {\n    if (internalAPI.closeAll) {\n      return internalAPI.closeAll();\n    }\n  }),\n  setPlacement: afterInit<void>(\n    (placement: Placement, params?: { offset: number }) => {\n      if (internalAPI.setPlacement) {\n        return internalAPI.setPlacement(placement, params);\n      }\n    },\n  ),\n  setDuration: afterInit<void>((duration: number) => {\n    if (internalAPI.setDuration) {\n      return internalAPI.setDuration(duration);\n    }\n  }),\n};\n","import React, { useCallback, useState } from 'react';\nimport { cx } from 'emotion';\n\nimport { useAsyncState } from './useAsyncState';\nimport type { NotificationCta, NotificationVariant } from '../types';\nimport { NotificationItemContainer } from '../NotificationItem';\nimport { getStyles } from './NotificationsManager.styles';\n\nexport type Placement = 'top' | 'bottom';\n\nexport interface NotificationProps {\n  id: string | number;\n  text: string;\n  onClose: Function;\n  duration?: number;\n  withClose: boolean;\n  isShown: boolean;\n  variant: NotificationVariant;\n  title?: string;\n  cta?: Partial<NotificationCta>;\n}\n\nexport type ShowAction<T> = (\n  text: string,\n  setting?: {\n    variant: NotificationVariant;\n    id?: string;\n    duration?: number;\n    withClose?: boolean;\n    title?: string;\n    cta?: Partial<NotificationCta>;\n  },\n) => T;\n\nexport type CloseAction<T> = (id: string | number) => T;\n\nexport type CloseAllAction<T> = () => T;\n\nexport type SetDurationAction<T> = (duration: number) => T;\n\nexport type SetPlacementAction<T> = (\n  placement: Placement,\n  params?: { offset: number },\n) => T;\n\nexport interface NotificationsManagerProps {\n  register: (name: string, callback: Function) => void;\n}\n\nlet uniqueId = 0;\n\nconst getUniqueId = (): number => {\n  uniqueId += 1;\n  return uniqueId;\n};\n\nexport const NotificationsManager = ({\n  register,\n}: NotificationsManagerProps): React.ReactElement => {\n  const [items, setItems] = useAsyncState<NotificationProps[]>([]);\n  const [placement, setPlacementState] = useState('bottom');\n  const [placementOffset, setPlacementOffset] = useState(20);\n  const [duration, setDuration] = useState(6000);\n  const styles = getStyles(placement, placementOffset);\n\n  const setPlacement: SetPlacementAction<void> = useCallback(\n    (placement, params?: { offset: number }) => {\n      if (placement === 'bottom' || placement === 'top') {\n        const placementOffset = params && params.offset ? params.offset : 20;\n        setPlacementState(placement);\n        setPlacementOffset(placementOffset);\n      }\n    },\n    [],\n  );\n\n  const close: CloseAction<void> = useCallback(\n    (id) => {\n      setItems(\n        items.current.map((item) => {\n          if (item.id !== id) {\n            return item;\n          }\n\n          return {\n            ...item,\n            isShown: false,\n          };\n        }),\n      );\n    },\n    [items, setItems],\n  );\n\n  const closeAndDelete = useCallback(\n    (id: string | number) => {\n      setItems(items.current.filter((item) => item.id !== id));\n    },\n    [items, setItems],\n  );\n\n  const closeAll: CloseAllAction<void> = useCallback(() => {\n    setItems(\n      items.current.map((item) => {\n        return {\n          ...item,\n          isShown: false,\n        };\n      }),\n    );\n  }, [items, setItems]);\n\n  const show: ShowAction<NotificationProps> = useCallback(\n    (text, settings) => {\n      const itemDuration =\n        settings && typeof settings.duration !== 'undefined' // Needed as 0 is falsy but 0 is valid to disable auto-closing a notification\n          ? settings.duration\n          : duration;\n      const variant = settings?.variant ? settings.variant : 'positive';\n\n      const withClose =\n        settings && typeof settings.withClose !== 'undefined'\n          ? settings.withClose\n          : true;\n\n      const notificationId = settings?.id ? settings.id : getUniqueId();\n\n      const notification = {\n        id: notificationId,\n        text,\n        onClose: () => closeAndDelete(notificationId),\n        duration: itemDuration,\n        withClose,\n        isShown: true,\n        variant,\n        title: settings?.title,\n        cta: settings?.cta,\n      };\n\n      const alreadyThere = items.current.find(\n        (item) => item.id === notification.id,\n      );\n\n      if (alreadyThere) {\n        return alreadyThere;\n      }\n\n      if (placement === 'top') {\n        setItems([notification, ...items.current]);\n      } else {\n        setItems([...items.current, notification]);\n      }\n\n      return notification;\n    },\n    [closeAndDelete, duration, items, placement, setItems],\n  );\n\n  register('close', close);\n  register('show', show);\n  register('closeAll', closeAll);\n  register('setPlacement', setPlacement);\n  register('setDuration', setDuration);\n\n  return (\n    <div\n      data-test-id=\"cf-notification-container\"\n      className={cx(styles.manager)}\n    >\n      <div className={cx(styles.container)}>\n        {items.current.map((item) => (\n          <NotificationItemContainer\n            variant={item.variant}\n            duration={item.duration}\n            key={item.id}\n            withCloseButton={item.withClose}\n            // eslint-disable-next-line react/jsx-handler-names\n            onClose={item.onClose}\n            isShown={item.isShown}\n            title={item.title}\n            cta={item.cta}\n          >\n            {item.text}\n          </NotificationItemContainer>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nNotificationsManager.displayName = 'NotificationsManager';\n","import { useRef, useState } from 'react';\n\n/**\n * An asyncronous state hook.\n *\n * Think of it as a slight modification of React's `useState` hook, where the\n * state returned is instead a `MutableRefObject` like you know it from the\n * `useRef` hook.\n *\n * @param value\n * @returns A tuple with the `MutableRefObject` and a function to set the state\n */\nexport function useAsyncState<ValueType>(\n  value: ValueType,\n): [React.MutableRefObject<ValueType>, (state: ValueType) => void] {\n  const ref = useRef<ValueType>(value);\n  const [, forceUpdate] = useState(false);\n\n  const setState = (newState: ValueType) => {\n    if (!Object.is(ref.current, newState)) {\n      ref.current = newState;\n      forceUpdate((state) => !state);\n    }\n  };\n\n  return [ref, setState];\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  CheckCircleIcon,\n  ErrorCircleIcon,\n  WarningIcon,\n  CloseIcon,\n  InfoCircleIcon,\n} from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { TextLink } from '@contentful/f36-text-link';\nimport {\n  Flex,\n  Box,\n  type ExpandProps,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { Heading, Paragraph } from '@contentful/f36-typography';\n\nimport type { NotificationVariant, NotificationCta } from '../types';\nimport { getStyles } from './NotificationItem.styles';\n\nexport interface NotificationItemProps extends CommonProps {\n  /**\n   * Defines the styling of notification\n   * @default positive\n   */\n  variant?: NotificationVariant;\n  /**\n   * Defines if the close button should be rendered\n   * @default true\n   */\n  withCloseButton?: boolean;\n  /**\n   * Function that will be triggered when close button is clicked\n   */\n  onClose?: Function;\n  /**\n   * Title of the notification\n   */\n  title?: string;\n  /**\n   * Content of the notificaiton\n   */\n  children: React.ReactNode;\n  /**\n   * Label and text-link props of the CTA\n   */\n  cta?: Partial<NotificationCta>;\n}\n\nconst _NotificationItem = (props: ExpandProps<NotificationItemProps>, ref) => {\n  const {\n    className,\n    children,\n    cta,\n    withCloseButton = true,\n    variant = 'positive',\n    onClose,\n    testId = 'cf-ui-notification',\n    title,\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ variant });\n\n  const iconSize = title ? 'medium' : 'small';\n  const iconVariants = {\n    positive: <CheckCircleIcon variant={variant} size={iconSize} />,\n    warning: <WarningIcon variant={variant} size={iconSize} />,\n    negative: <ErrorCircleIcon variant={variant} size={iconSize} />,\n    primary: <InfoCircleIcon variant={variant} size={iconSize} />,\n  };\n\n  const intents = {\n    positive: 'success',\n    warning: 'warning',\n    negative: 'error',\n    primary: 'info',\n  };\n\n  return (\n    <Flex\n      data-test-id={testId}\n      role=\"alert\"\n      data-intent={intents[variant]}\n      aria-live={variant === 'positive' ? 'polite' : 'assertive'}\n      className={cx(styles.wrapper, className)}\n      {...otherProps}\n      ref={ref}\n    >\n      <Box className={cx(styles.icon)}>{iconVariants[variant]}</Box>\n      <Box className={cx(styles.notification)}>\n        {title && (\n          <Heading\n            as=\"h2\"\n            className={cx(styles.title)}\n            marginBottom=\"spacingXs\"\n          >\n            {title}\n          </Heading>\n        )}\n        {children && (\n          <Paragraph className={styles.content} marginBottom=\"spacingXs\">\n            {children}\n          </Paragraph>\n        )}\n        {cta?.label && (\n          <TextLink\n            {...cta?.textLinkProps}\n            as={cta?.textLinkProps?.as || 'button'}\n          >\n            {cta.label}\n          </TextLink>\n        )}\n      </Box>\n      {withCloseButton && (\n        <Box>\n          <Button\n            className={cx(styles.closeButton)}\n            variant=\"transparent\"\n            startIcon={<CloseIcon />}\n            onClick={() => {\n              onClose && onClose();\n            }}\n            testId=\"cf-ui-notification-close\"\n            aria-label=\"Dismiss\"\n          />\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\nexport const NotificationItem = React.forwardRef(_NotificationItem);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport type { NotificationVariant } from '../types';\n\nconst variantColors = {\n  positive: tokens.green600,\n  negative: tokens.red600,\n  warning: tokens.orange400,\n  primary: tokens.blue600,\n};\n\nconst getWrapperStyle = ({ variant }) =>\n  css({\n    background: tokens.colorWhite,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.boxShadowHeavy,\n    boxSizing: 'border-box',\n    display: 'flex',\n    overflow: 'hidden',\n    position: 'relative',\n    padding: tokens.spacingM,\n    width: '100%',\n    '&:before': {\n      backgroundColor: variantColors[variant],\n      content: '\"\"',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      top: 0,\n      width: '2px',\n    },\n  });\n\nconst getIconStyle = ({ variant }) =>\n  css({\n    fill: variantColors[variant],\n    marginRight: tokens.spacingM,\n    alignItems: 'flex-start',\n  });\n\nconst notificationStyle: CSSObject = {\n  fontSize: tokens.fontSizeM,\n  lineHeight: tokens.lineHeightM,\n  width: '100%',\n};\n\nconst titleStyle: CSSObject = {\n  color: tokens.gray800,\n  fontSize: tokens.fontSizeL,\n  lineHeight: tokens.lineHeightL,\n};\n\nconst contentStyle: CSSObject = {\n  color: tokens.gray700,\n  wordBreak: 'break-word',\n  hyphens: 'auto',\n  '&:last-child': {\n    marginBottom: 0,\n  },\n};\n\nconst closeButtonStyle: CSSObject = {\n  marginBottom: `-${tokens.spacingXs}`,\n  marginRight: `-${tokens.spacingXs}`,\n  marginTop: `-${tokens.spacingXs}`,\n};\n\nexport const getStyles = ({ variant }: { variant: NotificationVariant }) => ({\n  wrapper: getWrapperStyle({ variant }),\n  icon: getIconStyle({ variant }),\n  notification: css(notificationStyle),\n  title: css(titleStyle),\n  content: css(contentStyle),\n  closeButton: css(closeButtonStyle),\n});\n","import React, { Component } from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nimport { NotificationItem, NotificationItemProps } from './NotificationItem';\nimport { cx, css } from 'emotion';\n\nexport interface NotificationItemContainerProps extends NotificationItemProps {\n  duration?: number;\n  isShown?: boolean;\n}\n\nexport interface NotificationItemContainerState {\n  isShown: boolean;\n}\n\nconst defaultProps: Partial<NotificationItemContainerProps> = {\n  isShown: false,\n};\n\nexport class NotificationItemContainer extends Component<\n  NotificationItemContainerProps,\n  NotificationItemContainerState\n> {\n  static defaultProps = defaultProps;\n  displayName: 'NotificationItemContainer';\n\n  timer: number | null = null;\n\n  state = {\n    isShown: false,\n  };\n\n  componentDidMount() {\n    this.startTimer();\n    this.setState({ isShown: true });\n  }\n\n  componentDidUpdate(prevProps: NotificationItemContainerProps) {\n    if (prevProps.isShown !== this.props.isShown) {\n      this.setState({\n        isShown: this.props.isShown!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  startTimer = () => {\n    if (this.props.duration) {\n      if (this.props.duration === 0) return;\n\n      this.timer = window.setTimeout(() => {\n        this.handleClose();\n      }, this.props.duration);\n    }\n  };\n\n  stopTimer = () => {\n    if (this.props.duration === 0) return;\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  };\n\n  handleClose = () => {\n    this.stopTimer();\n    this.setState({ isShown: false });\n  };\n\n  handleMouseEnter = () => {\n    this.stopTimer();\n  };\n\n  handleMouseLeave = () => {\n    this.startTimer();\n  };\n\n  render() {\n    const { isShown, duration, ...otherProps } = this.props;\n    return (\n      <AnimateHeight\n        duration={200}\n        height={this.state.isShown ? 'auto' : 0}\n        easing=\"ease-in-out\"\n        animateOpacity\n        onHeightAnimationEnd={() => {\n          if (this.state.isShown === false) {\n            if (this.props.onClose) {\n              this.props.onClose();\n            }\n          }\n        }}\n      >\n        <div\n          className={cx(css({ pointerEvents: 'all' }))}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n        >\n          <NotificationItem {...otherProps} onClose={this.handleClose} />\n        </div>\n      </AnimateHeight>\n    );\n  }\n}\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = (placement, placementOffset) => ({\n  manager: css({\n    left: 0,\n    margin: '0 auto',\n    maxWidth: '560px',\n    position: 'fixed',\n    pointerEvents: 'none',\n    right: 0,\n    [placement]: placementOffset,\n    zIndex: tokens.zIndexNotification,\n  }),\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 auto',\n    maxWidth: '560px',\n    minWidth: '360px',\n    '& > div': {\n      marginBottom: placement === 'top' ? 0 : tokens.spacingS,\n      marginTop: placement === 'top' ? tokens.spacingS : 0,\n    },\n  }),\n});\n"]}