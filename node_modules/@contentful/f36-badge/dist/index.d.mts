import React from 'react';
import { PropsWithHTMLElement, CommonProps, EntityStatus, PickUnion } from '@contentful/f36-core';

declare type BadgeSize = 'default' | 'small';
declare type BadgeVariant = 'negative' | 'positive' | 'primary' | 'secondary' | 'warning' | 'primary-filled' | 'featured';

declare type BadgeInternalProps = CommonProps & {
    /**
     * Determines the variation of the component
     * @default primary
     */
    variant?: BadgeVariant;
    children: React.ReactNode;
    /**
     * Sets the size of the component
     * @default default
     */
    size?: BadgeSize;
    /**
     * Expects any of the icon components. Renders the icon aligned to the start
     */
    startIcon?: React.ReactNode;
    /**
     * Expects any of the icon components. Renders the icon aligned to the end
     */
    endIcon?: React.ReactNode;
};
declare type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;
declare const Badge: React.ForwardRefExoticComponent<Omit<Omit<Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "key" | keyof React.HTMLAttributes<HTMLDivElement>>, never>, "variant" | "size" | "children" | keyof CommonProps | "startIcon" | "endIcon"> & CommonProps & {
    /**
     * Determines the variation of the component
     * @default primary
     */
    variant?: BadgeVariant;
    children: React.ReactNode;
    /**
     * Sets the size of the component
     * @default default
     */
    size?: BadgeSize;
    /**
     * Expects any of the icon components. Renders the icon aligned to the start
     */
    startIcon?: React.ReactNode;
    /**
     * Expects any of the icon components. Renders the icon aligned to the end
     */
    endIcon?: React.ReactNode;
} & React.RefAttributes<HTMLDivElement>>;

declare type BadgeSizeWithIsScheduledProp = {
    /**
     * Sets the size of the component
     * @default default
     */
    size?: Exclude<BadgeSize, 'small'>;
    /**
     * Indicates that the entity that the badge is related to has a scheduled action
     */
    isScheduled?: boolean;
} | {
    /**
     * Sets the size of the component
     * @default default
     */
    size: PickUnion<BadgeSize, 'small'>;
    isScheduled?: never;
};
declare type EntityStatusBadgeProps = Omit<BadgeProps, 'children' | 'endIcon' | 'size' | 'startIcon' | 'variant'> & BadgeSizeWithIsScheduledProp & {
    entityStatus: EntityStatus;
};
declare const _EntityStatusBadge: React.ForwardRefExoticComponent<EntityStatusBadgeProps & React.RefAttributes<HTMLDivElement>>;

export { Badge, BadgeProps, BadgeVariant, _EntityStatusBadge as EntityStatusBadge, EntityStatusBadgeProps };
