{"version":3,"sources":["../../src/GlobalStyles/GlobalStyles.tsx","../../src/Flex/Flex.tsx","../../src/Box/Box.tsx","../../src/utils/getSpacingStyles.ts","../../src/Grid/Grid.tsx","../../src/Grid/GridItem/GridItem.tsx","../../src/Grid/CompoundGrid.tsx","../../src/Stack/Stack.tsx","../../src/ScreenReaderOnly/ScreenReaderOnly.tsx","../../src/ScreenReaderOnly/ScreenReaderOnly.styles.ts","../../src/hooks/useId.ts","../../src/hooks/useControllableState.ts","../../src/hooks/useImageLoaded.ts","../../src/utils/mergeRefs.ts","../../src/utils/getEntityStatusStyles.ts"],"names":["React","Global","css","tokens","cssReset","GlobalStyles","withNormalize","styles","cx","SpacingTable","convertSpacingToToken","spacing","getSpacingStyles","props","BOX_DEFAULT_TAG","useBox","_a","display","className","margin","marginBottom","marginLeft","marginRight","marginTop","padding","paddingBottom","paddingLeft","paddingRight","paddingTop","testId","Element","otherProps","__objRest","__spreadValues","_Box","ref","boxProps","__spreadProps","Box","FLEX_DEFAULT_TAG","_Flex","_b","isInline","alignItems","alignSelf","alignContent","flex","flexBasis","flexShrink","flexDirection","flexGrow","flexWrap","fullHeight","fullWidth","gap","justifyContent","justifyItems","justifySelf","order","children","as","Flex","GRID_DEFAULT_TAG","_Grid","columnGap","columns","flow","rowGap","rows","handleGridTemplate","value","Grid","_GridItem","columnStart","columnEnd","rowStart","rowEnd","area","calculatedArea","GridItem","STACK_DEFAULT_TAG","_Stack","Stack","getStyles","ScreenReaderOnly","useMemo","useId","id","modifier","useState","useCallback","useControllableState","isOpen","defaultIsOpen","onOpen","onClose","isOpenState","setIsOpen","isControlled","isOpenValue","handleClose","handleOpen","useEffect","useRef","useImageLoaded","onLoadProp","loaded","setLoaded","onLoad","mergeRefs","refs","getEntityStatusStyles","status"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Global, css, type SerializedStyles } from '@emotion/core';\nimport tokens from '@contentful/f36-tokens';\n\nconst cssReset = css`\n  /* Remove default margin */\n  /* Button has default margin in some browsers, like safari */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd,\n  button {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role='list'],\n  ol[role='list'] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations and transitions for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n\nexport const GlobalStyles = ({\n  withNormalize = true,\n  styles,\n}: {\n  /**\n   * Determines if CSS reset should be used\n   *\n   * @default true\n   */\n  withNormalize?: boolean;\n  /**\n   * Extend global styles\n   *\n   * @default undefined\n   */\n  styles?: SerializedStyles;\n}) => {\n  return (\n    <Global\n      styles={css`\n        ${withNormalize ? cssReset : undefined};\n        html {\n          border: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        body {\n          color: ${tokens.gray800};\n          font-family: ${tokens.fontStackPrimary};\n          font-size: ${tokens.fontSizeM};\n          line-height: ${tokens.lineHeightM};\n        }\n\n        code {\n          font-family: ${tokens.fontStackMonospace};\n        }\n\n        fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n        }\n\n        *,\n        *::after,\n        *::before {\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          box-sizing: inherit;\n        }\n\n        ${styles};\n      `}\n    />\n  );\n};\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\nimport tokens from '@contentful/f36-tokens';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\n\nexport interface FlexInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Sets width: 100% */\n  fullWidth?: boolean;\n  /**\n   * Sets height: 100% */\n  fullHeight?: boolean;\n\n  /**\n   * Sets display: inline-flex */\n  isInline?: boolean;\n\n  /**\n   * A shorthand property for flex-grow, flex-shrink, flex-basis\n   */\n  flex?: CSS.Property.Flex;\n  /**\n   * Defines the initial size of a flexbox item.\n   * */\n  flexBasis?: CSS.Property.FlexBasis;\n  /**\n   * Defines how much a flexbox item should shrink if there's not enough space available. */\n  flexShrink?: CSS.Property.FlexShrink;\n  /**\n   * Defines if flexbox items appear on a single line or on multiple lines within a flexbox container. */\n  flexWrap?: CSS.Property.FlexWrap;\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: CSS.Property.FlexDirection;\n  /**\n   * Defines how much a flexbox item should grow if there's space available. */\n  flexGrow?: CSS.Property.FlexGrow;\n  /**\n   * Defines a gap between flexbox items. */\n  gap?: Spacing | string;\n  /**\n   * Defines how flexbox/grid items are aligned according to the main axis, within a flexbox/grid container. */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. */\n  justifyItems?: CSS.Property.JustifyContent;\n  /**\n   * Sets the way a box is justified inside its alignment container along the appropriate axis. */\n  justifySelf?: CSS.Property.JustifySelf;\n  /**\n   * Defines how flexbox items are aligned according to the cross axis, within a line of a flexbox container.\n   */\n  alignItems?: CSS.Property.AlignItems;\n  /**\n   * Works like align-items, but applies only to a single flexbox item, instead of all of them.\n   */\n  alignSelf?: CSS.Property.AlignItems;\n  /**\n   * Defines how each line is aligned within a flexbox/grid container.\n   */\n  alignContent?: CSS.Property.AlignContent;\n  /**\n   * Defines the order of a flexbox item\n   */\n  order?: CSS.Property.Order;\n}\n\nexport type FlexProps<E extends React.ElementType = typeof FLEX_DEFAULT_TAG> =\n  PolymorphicProps<FlexInternalProps, E>;\n\nconst FLEX_DEFAULT_TAG = 'div';\n\nfunction _Flex<E extends React.ElementType = typeof FLEX_DEFAULT_TAG>(\n  {\n    isInline,\n    alignItems,\n    alignSelf,\n    alignContent,\n    flex,\n    flexBasis,\n    flexShrink,\n    flexDirection,\n    flexGrow,\n    flexWrap,\n    fullHeight,\n    fullWidth,\n    gap,\n    justifyContent,\n    justifyItems,\n    justifySelf,\n    order,\n    children,\n    as,\n    ...otherProps\n  }: FlexProps<E>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- We want to support all element types\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || FLEX_DEFAULT_TAG,\n  });\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-flex' : 'flex',\n          width: fullWidth ? '100%' : undefined,\n          height: fullHeight ? '100%' : undefined,\n          flex,\n          flexBasis,\n          flexShrink,\n          flexDirection,\n          gap: gap === 'none' ? 0 : tokens[gap] ?? gap,\n          justifyContent,\n          justifyItems,\n          justifySelf,\n          alignItems,\n          alignSelf,\n          alignContent,\n          order,\n          flexWrap,\n          flexGrow,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Flex.displayName = 'Flex';\n\nexport const Flex: PolymorphicComponent<\n  ExpandProps<FlexInternalProps>,\n  typeof FLEX_DEFAULT_TAG\n> = React.forwardRef(_Flex);\n","import * as React from 'react';\nimport * as CSS from 'csstype';\nimport { css, cx } from 'emotion';\nimport type { MarginProps, PaddingProps, CommonProps } from '../types';\nimport { getSpacingStyles } from '../utils/getSpacingStyles';\n\nconst BOX_DEFAULT_TAG: React.ElementType = 'div';\n\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\n\nexport interface BoxInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Sets the display behavior of the element\n   */\n  display?: CSS.Property.Display;\n  children?: React.ReactNode;\n  as?: React.ElementType<any>;\n}\n\nexport type BoxProps<E extends React.ElementType = typeof BOX_DEFAULT_TAG> =\n  PolymorphicProps<BoxInternalProps, E>;\n\nexport function useBox<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n) {\n  const {\n    display,\n    className,\n    margin,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    marginTop,\n    padding,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    testId,\n    as: Element = BOX_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n  const boxProps = {\n    className: cx(\n      css({\n        display,\n      }),\n      css({\n        ...getSpacingStyles({\n          margin,\n          marginBottom,\n          marginLeft,\n          marginRight,\n          marginTop,\n          padding,\n          paddingBottom,\n          paddingLeft,\n          paddingRight,\n          paddingTop,\n        }),\n      }),\n      className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  return {\n    boxProps: boxProps,\n    Element,\n  };\n}\n\nfunction _Box<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<E>(props);\n\n  return (\n    <Element {...boxProps} ref={ref}>\n      {props.children}\n    </Element>\n  );\n}\n\n_Box.displayName = 'Box';\n\nexport const Box: PolymorphicComponent<\n  ExpandProps<BoxInternalProps>,\n  typeof BOX_DEFAULT_TAG\n> = React.forwardRef(_Box);\n","import tokens from '@contentful/f36-tokens';\nimport type { MarginProps, PaddingProps, Spacing } from '../types';\n\nconst SpacingTable: { [key in Spacing]: string | number | undefined } = {\n  none: 0,\n  spacing2Xs: tokens.spacing2Xs,\n  spacingXs: tokens.spacingXs,\n  spacingS: tokens.spacingS,\n  spacingM: tokens.spacingM,\n  spacingL: tokens.spacingL,\n  spacingXl: tokens.spacingXl,\n  spacing2Xl: tokens.spacing2Xl,\n  spacing3Xl: tokens.spacing3Xl,\n  spacing4Xl: tokens.spacing4Xl,\n};\n\nexport function convertSpacingToToken(spacing: Spacing) {\n  return SpacingTable[spacing];\n}\n\nexport function getSpacingStyles(props: MarginProps & PaddingProps) {\n  return Object.assign(\n    {},\n    props.margin ? { margin: convertSpacingToToken(props.margin) } : null,\n    props.marginLeft\n      ? { marginLeft: convertSpacingToToken(props.marginLeft) }\n      : null,\n    props.marginRight\n      ? { marginRight: convertSpacingToToken(props.marginRight) }\n      : null,\n    props.marginTop\n      ? { marginTop: convertSpacingToToken(props.marginTop) }\n      : null,\n    props.marginBottom\n      ? { marginBottom: convertSpacingToToken(props.marginBottom) }\n      : null,\n    props.padding ? { padding: convertSpacingToToken(props.padding) } : null,\n    props.paddingLeft\n      ? { paddingLeft: convertSpacingToToken(props.paddingLeft) }\n      : null,\n    props.paddingRight\n      ? { paddingRight: convertSpacingToToken(props.paddingRight) }\n      : null,\n    props.paddingTop\n      ? { paddingTop: convertSpacingToToken(props.paddingTop) }\n      : null,\n    props.paddingBottom\n      ? { paddingBottom: convertSpacingToToken(props.paddingBottom) }\n      : null,\n  );\n}\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\nimport { useBox } from '../Box';\nimport { convertSpacingToToken } from '../utils/getSpacingStyles';\n\nexport interface GridInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Defines how many columns, default is `auto` */\n  columns?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Defines how many rows, default is `auto` */\n  rows?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Spaces between rows, corresponds to of spacing tokens values, default is none */\n  rowGap?: Spacing;\n  /**\n   * One of Spacing tokens values, default is 0 */\n  columnGap?: Spacing;\n  /**\n   * One of grid-auto-flow css values */\n  flow?: CSS.Property.GridAutoFlow;\n  /**\n   * Sets display:inline-grid */\n  isInline?: boolean;\n  /**\n   * One of justify-content css values */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * One of justify-content css values */\n  alignContent?: CSS.Property.AlignContent;\n}\n\nconst GRID_DEFAULT_TAG = 'div';\n\nexport type GridProps<E extends React.ElementType = typeof GRID_DEFAULT_TAG> =\n  PolymorphicProps<GridInternalProps, E>;\n\nfunction _Grid<E extends React.ElementType = typeof GRID_DEFAULT_TAG>(\n  {\n    alignContent,\n    children,\n    columnGap = 'spacingM',\n    columns = 'auto',\n    flow,\n    isInline,\n    justifyContent,\n    rowGap = 'none',\n    rows = 'auto',\n    as,\n    ...otherProps\n  }: GridProps<E>,\n  ref: React.Ref<any>,\n) {\n  const handleGridTemplate = (value?: string | number) => {\n    if (typeof value === 'number') {\n      return `repeat(${value}, minmax(0, 1fr))`;\n    }\n    return value;\n  };\n\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || GRID_DEFAULT_TAG,\n  });\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-grid' : 'grid',\n          gridTemplateColumns: handleGridTemplate(columns),\n          gridTemplateRows: handleGridTemplate(rows),\n          flow,\n          justifyContent,\n          alignContent,\n          columnGap: convertSpacingToToken(columnGap) ?? 0,\n          rowGap: convertSpacingToToken(rowGap) ?? 0,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Grid.displayName = 'Grid';\n\nexport const Grid: PolymorphicComponent<\n  ExpandProps<GridInternalProps>,\n  typeof GRID_DEFAULT_TAG\n> = React.forwardRef(_Grid);\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n} from '../../Primitive/Primitive';\nimport { useBox } from '../../Box';\nimport type { MarginProps, PaddingProps, CommonProps } from '../../types';\n\nconst GRID_ITEM_DEFAULT_TAG = 'div';\n\nexport interface GridItemInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * one of grid-column-start css values */\n  columnStart?: CSS.Property.GridColumnStart;\n  /**\n   * one of grid-column-end css values */\n  columnEnd?: CSS.Property.GridColumnEnd;\n  /**\n   * one of grid-column-start css values */\n  rowStart?: CSS.Property.GridRowStart;\n  /**\n   * one of grid-row-end css values */\n  rowEnd?: CSS.Property.GridRowEnd;\n  /**\n   * one of grid-area css values */\n  area?: CSS.Property.GridArea;\n  /**\n   * order css property */\n  order?: number;\n}\n\nexport type GridItemProps<\n  E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG,\n> = PolymorphicProps<GridItemInternalProps, E>;\n\nfunction _GridItem<E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG>(\n  {\n    children,\n    columnStart,\n    columnEnd,\n    rowStart,\n    rowEnd,\n    area,\n    order,\n    ...otherProps\n  }: GridItemProps<E>,\n  ref: React.Ref<any>,\n) {\n  const calculatedArea = area\n    ? area\n    : [\n        rowStart || 'auto',\n        columnStart || 'auto',\n        rowEnd || 'auto',\n        columnEnd || 'auto',\n      ].join(' / ');\n\n  const { boxProps, Element } = useBox(otherProps);\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          gridArea: calculatedArea,\n          order,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_GridItem.displayName = 'GridItem';\n\nexport const GridItem: PolymorphicComponent<\n  GridItemInternalProps,\n  typeof GRID_ITEM_DEFAULT_TAG\n> = React.forwardRef(_GridItem);\n","import { Grid as OriginalGrid } from './Grid';\nimport { GridItem } from './GridItem/GridItem';\n\ntype CompoundGrid = typeof OriginalGrid & {\n  Item: typeof GridItem;\n};\n\nexport const Grid = OriginalGrid as CompoundGrid;\nGrid.Item = GridItem;\n","import * as React from 'react';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { Spacing } from '../types';\nimport { Flex, type FlexInternalProps } from '../Flex/Flex';\n\nexport interface StackInternalProps\n  extends Omit<FlexInternalProps, 'flexDirection' | 'gap'> {\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: 'row' | 'column';\n  /**\n   * The space between each stack item\n   */\n  spacing?: Spacing;\n}\n\nexport type StackProps<E extends React.ElementType = typeof STACK_DEFAULT_TAG> =\n  PolymorphicProps<StackInternalProps, E>;\n\nconst STACK_DEFAULT_TAG = 'div';\n\nfunction _Stack<E extends React.ElementType = typeof STACK_DEFAULT_TAG>(\n  {\n    flexDirection = 'row',\n    alignItems = 'center',\n    isInline = false,\n    spacing = 'spacingM',\n    children,\n    as,\n    ...otherProps\n  }: StackProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || STACK_DEFAULT_TAG,\n  });\n  return (\n    <Flex\n      {...boxProps}\n      as={Element}\n      flexDirection={flexDirection}\n      alignItems={alignItems}\n      isInline={isInline}\n      className={boxProps.className}\n      gap={spacing}\n      ref={ref}\n    >\n      {children}\n    </Flex>\n  );\n}\n\n_Stack.displayName = 'Stack';\n\nexport const Stack: PolymorphicComponent<\n  ExpandProps<StackInternalProps>,\n  typeof STACK_DEFAULT_TAG\n> = React.forwardRef(_Stack);\n","import { cx } from 'emotion';\nimport React from 'react';\nimport { getStyles } from './ScreenReaderOnly.styles';\nimport type { CommonProps } from '../types';\n\nexport interface ScreenReaderOnlyProps extends CommonProps {\n  children?: React.ReactNode;\n  as?: 'div' | 'span';\n}\n\nexport const ScreenReaderOnly = ({\n  children,\n  className,\n  testId = 'cf-ui-ScreenReaderOnly',\n  as = 'div',\n  ...otherProps\n}: ScreenReaderOnlyProps) => {\n  const styles = getStyles();\n\n  const Element: React.ElementType = as;\n\n  return (\n    <Element\n      {...otherProps}\n      data-test-id={testId}\n      className={cx(styles.screenReaderOnly, className)}\n    >\n      {children}\n    </Element>\n  );\n};\n","import { css } from 'emotion';\n\nexport function getStyles() {\n  return {\n    screenReaderOnly: css({\n      position: 'absolute',\n      width: '1px',\n      height: '1px',\n      padding: 0,\n      margin: '-1px',\n      overflow: 'hidden',\n      clip: 'rect(0, 0, 0, 0)',\n      border: 0,\n    }),\n  };\n}\n","import { useMemo } from 'react';\n\n/**\n * useId hook provides unique ids for react elements.\n *\n * @param id - an id, provided to a component's props. Can be undefined.\n * @param modifier - a descriptive string, to make ids more readable.\n * @returns a unique id\n */\nexport function useId(id?: string, modifier?: string): string {\n  return useMemo(\n    () => id || [modifier || 'id', Math.round(Math.random() * 10000)].join('_'),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n}\n","import { useState, useCallback } from 'react';\n\nexport type UseControllableStateProps = {\n  isOpen: boolean;\n  defaultIsOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n};\n\n/**\n * Hook that manages the controlled and un-controlled state\n */\nexport function useControllableState({\n  isOpen,\n  defaultIsOpen,\n  onOpen,\n  onClose,\n}: UseControllableStateProps) {\n  const [isOpenState, setIsOpen] = useState(defaultIsOpen || false);\n\n  const isControlled = isOpen !== undefined;\n  const isOpenValue = isControlled ? isOpen : isOpenState;\n\n  const handleClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClose?.();\n  }, [isControlled, onClose]);\n\n  const handleOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpen?.();\n  }, [isControlled, onOpen]);\n\n  return { isOpen: isOpenValue, isControlled, handleClose, handleOpen };\n}\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\ninterface UseImageLoadedProps {\n  onLoad?: () => unknown;\n}\n\nexport function useImageLoaded({\n  onLoad: onLoadProp,\n}: UseImageLoadedProps = {}) {\n  const [loaded, setLoaded] = useState(false);\n  const ref = useRef<HTMLImageElement | undefined>();\n\n  const onLoad = useCallback(() => {\n    onLoadProp?.();\n    setLoaded(true);\n  }, [onLoadProp]);\n\n  useEffect(() => {\n    if (ref.current && ref.current.complete) {\n      onLoad();\n    }\n  }, [onLoad]);\n\n  return { ref, loaded, onLoad };\n}\n","import React from 'react';\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>;\n\nexport function mergeRefs<T>(\n  ...refs: Array<ReactRef<T> | undefined>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n","import tokens from '@contentful/f36-tokens';\n\nimport type { EntityStatus } from '../types';\n\nexport const getEntityStatusStyles = ({ status }: { status: EntityStatus }) => {\n  switch (status) {\n    case 'published':\n      return {\n        color: tokens.colorGreenBase,\n        backgroundColor: tokens.colorGreenLightest,\n      };\n    case 'changed':\n      return {\n        color: tokens.colorBlueBase,\n        backgroundColor: tokens.colorBlueLightest,\n      };\n    case 'deleted':\n    case 'archived':\n      return {\n        color: tokens.colorRedBase,\n        backgroundColor: tokens.colorRedLightest,\n      };\n    case 'draft':\n      return {\n        color: tokens.colorOrangeDark,\n        backgroundColor:\n          '#ffefd5' /* temporary hardcoded value until palette improvements */,\n      };\n    case 'new':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue500,\n      };\n    default:\n      // eslint-disable-next-line no-console -- allow this warning until we refactor\n      console.warn(`Unknown EntityStatus: ${status}`);\n      return {};\n  }\n};\n"]}