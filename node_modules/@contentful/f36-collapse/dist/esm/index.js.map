{"version":3,"sources":["../../src/Collapse.tsx","../../src/Collapse.styles.ts"],"names":["React","useLayoutEffect","useRef","Box","css","cx","tokens","getCollapseStyles","className","Collapse","_a","_b","children","isExpanded","testId","otherProps","__objRest","panelEl","styles","getPanelContentHeight","current","handleTransitionEnd","fromHeight","toHeight","__spreadProps","__spreadValues"],"mappings":"+kBAAA,OAAOA,GAAS,mBAAAC,EAAiB,UAAAC,MAAc,QAC/C,OACE,OAAAC,MAGK,uBCLP,OAAS,OAAAC,EAAK,MAAAC,MAAU,UACxB,OAAOC,MAAY,yBAEZ,IAAMC,EAAoB,CAAC,CAAE,UAAAC,CAAU,KACrC,CACL,gBAAiBH,EACfD,EAAI,CACF,UAAW,aACX,SAAU,SACV,OAAQ,EACR,QAAS,OACT,WAAY,UAAUE,EAAO,yBAAyB,IAAIA,EAAO,uBAAuB,aAAaA,EAAO,yBAAyB,IAAIA,EAAO,uBAAuB,EACzK,CAAC,EACDE,CACF,CACF,GDWK,IAAMC,EAAYC,GAMJ,CANI,IAAAC,EAAAD,EACvB,UAAAE,EACA,UAAAJ,EACA,WAAAK,EAAa,GACb,OAAAC,EAAS,aA9BX,EA0ByBH,EAKpBI,EAAAC,EALoBL,EAKpB,CAJH,WACA,YACA,aACA,WAGA,IAAMM,EAAUf,EAAuB,IAAI,EACrCgB,EAASX,EAAkB,CAAE,UAAAC,CAAU,CAAC,EAExCW,EAAwB,IAAM,CAClC,GAAM,CAAE,QAAAC,CAAQ,EAAIH,EAEpB,OAAKG,EAME,GAAGA,EAAQ,YAAY,KAHrB,KAIX,EAEA,OAAAnB,EAAgB,IAAM,CACpB,GAAM,CAAE,QAAAmB,CAAQ,EAAIH,EAEdI,EAAsB,IAAM,CAC5BD,IACEP,EACFO,EAAQ,MAAM,YAAY,SAAU,MAAM,GAE1CA,EAAQ,MAAM,eAAe,gBAAgB,EAC7CA,EAAQ,MAAM,YAAY,UAAW,MAAM,GAGjD,EAEA,OAAIA,IACFA,EAAQ,iBAAiB,gBAAiBC,CAAmB,EAC7D,sBAAsB,UAAY,CAC3BR,GAKHO,EAAQ,MAAM,YAAY,UAAW,OAAO,EAC5CA,EAAQ,MAAM,eAAe,gBAAgB,GAJ7CA,EAAQ,MAAM,YAAY,iBAAkB,MAAM,EAOpD,IAAME,EAAaT,EAAa,MAAQM,EAAsB,EACxDI,EAAWV,EAAaM,EAAsB,EAAI,MACxDC,EAAQ,MAAM,YAAY,SAAUE,CAAU,EAE9C,sBAAsB,UAAY,CAChCF,EAAQ,MAAM,YAAY,SAAUG,CAAQ,CAC9C,CAAC,CACH,CAAC,GAGI,IAAM,CACPH,GACFA,EAAQ,oBAAoB,gBAAiBC,CAAmB,CAEpE,CACF,EAAG,CAACR,CAAU,CAAC,EAGbb,EAAA,cAACG,EAAAqB,EAAAC,EAAA,GACKV,GADL,CAEC,OAAQD,EACR,KAAK,SACL,cAAa,CAACD,EACd,UAAWK,EAAO,gBAClB,IAAKD,IAEJL,CACH,CAEJ","sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n} from '@contentful/f36-core';\n\nimport { getCollapseStyles } from './Collapse.styles';\n\ninterface CollapseInternalProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * string for additional classNames\n   */\n  className?: string;\n}\n\nexport type CollapseProps = PropsWithHTMLElement<CollapseInternalProps, 'div'>;\n\nexport const Collapse = ({\n  children,\n  className,\n  isExpanded = false,\n  testId = 'cf-collapse',\n  ...otherProps\n}: CollapseProps) => {\n  const panelEl = useRef<HTMLDivElement>(null);\n  const styles = getCollapseStyles({ className });\n\n  const getPanelContentHeight = () => {\n    const { current } = panelEl;\n\n    if (!current) {\n      // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    }\n\n    return `${current.scrollHeight}px`;\n  };\n\n  useLayoutEffect(() => {\n    const { current } = panelEl;\n\n    const handleTransitionEnd = () => {\n      if (current) {\n        if (isExpanded) {\n          current.style.setProperty('height', 'auto');\n        } else {\n          current.style.removeProperty('pointer-events');\n          current.style.setProperty('display', 'none');\n        }\n      }\n    };\n\n    if (current) {\n      current.addEventListener('transitionend', handleTransitionEnd);\n      requestAnimationFrame(function () {\n        if (!isExpanded) {\n          // Don't allow interaction while collapsing\n          current.style.setProperty('pointer-events', 'none');\n        } else {\n          // Overwrite none display to see expanding transition\n          current.style.setProperty('display', 'block');\n          current.style.removeProperty('pointer-events');\n        }\n        // Calculate panel height after removing none display\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current.style.setProperty('height', fromHeight);\n\n        requestAnimationFrame(function () {\n          current.style.setProperty('height', toHeight);\n        });\n      });\n    }\n\n    return () => {\n      if (current) {\n        current.removeEventListener('transitionend', handleTransitionEnd);\n      }\n    };\n  }, [isExpanded]);\n\n  return (\n    <Box\n      {...otherProps}\n      testId={testId}\n      role=\"region\"\n      aria-hidden={!isExpanded}\n      className={styles.collapseWrapper}\n      ref={panelEl}\n    >\n      {children}\n    </Box>\n  );\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getCollapseStyles = ({ className }: { className?: string }) => {\n  return {\n    collapseWrapper: cx(\n      css({\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        height: 0,\n        display: 'none',\n        transition: `height ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}, padding ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      }),\n      className,\n    ),\n  };\n};\n"]}